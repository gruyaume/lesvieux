// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: admin_accounts.sql

package db

import (
	"context"
)

const createAdminAccount = `-- name: CreateAdminAccount :one
INSERT INTO admin_accounts (
  email, password_hash
) VALUES (
  ?, ?
)
RETURNING id, email, password_hash
`

type CreateAdminAccountParams struct {
	Email        string
	PasswordHash string
}

func (q *Queries) CreateAdminAccount(ctx context.Context, arg CreateAdminAccountParams) (AdminAccount, error) {
	row := q.db.QueryRowContext(ctx, createAdminAccount, arg.Email, arg.PasswordHash)
	var i AdminAccount
	err := row.Scan(&i.ID, &i.Email, &i.PasswordHash)
	return i, err
}

const deleteAdminAccount = `-- name: DeleteAdminAccount :exec
DELETE FROM admin_accounts
WHERE id = ?
`

func (q *Queries) DeleteAdminAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAdminAccount, id)
	return err
}

const getAdminAccount = `-- name: GetAdminAccount :one
SELECT id, email, password_hash FROM admin_accounts
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAdminAccount(ctx context.Context, id int64) (AdminAccount, error) {
	row := q.db.QueryRowContext(ctx, getAdminAccount, id)
	var i AdminAccount
	err := row.Scan(&i.ID, &i.Email, &i.PasswordHash)
	return i, err
}

const getAdminAccountByEmail = `-- name: GetAdminAccountByEmail :one
SELECT id, email, password_hash FROM admin_accounts
WHERE email = ? LIMIT 1
`

func (q *Queries) GetAdminAccountByEmail(ctx context.Context, email string) (AdminAccount, error) {
	row := q.db.QueryRowContext(ctx, getAdminAccountByEmail, email)
	var i AdminAccount
	err := row.Scan(&i.ID, &i.Email, &i.PasswordHash)
	return i, err
}

const listAdminAccounts = `-- name: ListAdminAccounts :many
SELECT id, email, password_hash FROM admin_accounts
ORDER BY email
`

func (q *Queries) ListAdminAccounts(ctx context.Context) ([]AdminAccount, error) {
	rows, err := q.db.QueryContext(ctx, listAdminAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminAccount
	for rows.Next() {
		var i AdminAccount
		if err := rows.Scan(&i.ID, &i.Email, &i.PasswordHash); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const numAdminAccounts = `-- name: NumAdminAccounts :one
SELECT COUNT(*) FROM admin_accounts
`

func (q *Queries) NumAdminAccounts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, numAdminAccounts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateAdminAccount = `-- name: UpdateAdminAccount :exec
UPDATE admin_accounts
set password_hash = ?
WHERE id = ?
`

type UpdateAdminAccountParams struct {
	PasswordHash string
	ID           int64
}

func (q *Queries) UpdateAdminAccount(ctx context.Context, arg UpdateAdminAccountParams) error {
	_, err := q.db.ExecContext(ctx, updateAdminAccount, arg.PasswordHash, arg.ID)
	return err
}
