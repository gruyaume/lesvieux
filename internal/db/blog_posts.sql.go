// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: blog_posts.sql

package db

import (
	"context"
)

const createBlogPost = `-- name: CreateBlogPost :one
INSERT INTO blog_posts (
  title, content, created_at, status, account_id
) VALUES (
  ?, ?, ?, ?, ?
)
RETURNING id, title, content, created_at, status, account_id
`

type CreateBlogPostParams struct {
	Title     string
	Content   string
	CreatedAt string
	Status    string
	AccountID int64
}

func (q *Queries) CreateBlogPost(ctx context.Context, arg CreateBlogPostParams) (BlogPost, error) {
	row := q.db.QueryRowContext(ctx, createBlogPost,
		arg.Title,
		arg.Content,
		arg.CreatedAt,
		arg.Status,
		arg.AccountID,
	)
	var i BlogPost
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.Status,
		&i.AccountID,
	)
	return i, err
}

const deleteBlogPost = `-- name: DeleteBlogPost :exec
DELETE FROM blog_posts
WHERE id = ?
`

func (q *Queries) DeleteBlogPost(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBlogPost, id)
	return err
}

const getBlogPost = `-- name: GetBlogPost :one
SELECT id, title, content, created_at, status, account_id FROM blog_posts
WHERE id = ? LIMIT 1
`

func (q *Queries) GetBlogPost(ctx context.Context, id int64) (BlogPost, error) {
	row := q.db.QueryRowContext(ctx, getBlogPost, id)
	var i BlogPost
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.Status,
		&i.AccountID,
	)
	return i, err
}

const getPublicBlogPost = `-- name: GetPublicBlogPost :one
SELECT id, title, content, created_at, status, account_id FROM blog_posts
WHERE id = ? AND status = 'published'
LIMIT 1
`

func (q *Queries) GetPublicBlogPost(ctx context.Context, id int64) (BlogPost, error) {
	row := q.db.QueryRowContext(ctx, getPublicBlogPost, id)
	var i BlogPost
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.Status,
		&i.AccountID,
	)
	return i, err
}

const listBlogPosts = `-- name: ListBlogPosts :many
SELECT id, title, content, created_at, status, account_id FROM blog_posts
ORDER BY created_at DESC
`

func (q *Queries) ListBlogPosts(ctx context.Context) ([]BlogPost, error) {
	rows, err := q.db.QueryContext(ctx, listBlogPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogPost
	for rows.Next() {
		var i BlogPost
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.Status,
			&i.AccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBlogPostsByAccount = `-- name: ListBlogPostsByAccount :many
SELECT id, title, content, created_at, status, account_id FROM blog_posts
WHERE account_id = ?
ORDER BY created_at DESC
`

func (q *Queries) ListBlogPostsByAccount(ctx context.Context, accountID int64) ([]BlogPost, error) {
	rows, err := q.db.QueryContext(ctx, listBlogPostsByAccount, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogPost
	for rows.Next() {
		var i BlogPost
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.Status,
			&i.AccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPublicBlogPosts = `-- name: ListPublicBlogPosts :many
SELECT id, title, content, created_at, status, account_id FROM blog_posts
WHERE status = 'published'
ORDER BY created_at DESC
`

func (q *Queries) ListPublicBlogPosts(ctx context.Context) ([]BlogPost, error) {
	rows, err := q.db.QueryContext(ctx, listPublicBlogPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogPost
	for rows.Next() {
		var i BlogPost
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.Status,
			&i.AccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPublicBlogPostsByAccount = `-- name: ListPublicBlogPostsByAccount :many
SELECT id, title, content, created_at, status, account_id FROM blog_posts
WHERE status = 'published' AND account_id = ?
ORDER BY created_at DESC
`

func (q *Queries) ListPublicBlogPostsByAccount(ctx context.Context, accountID int64) ([]BlogPost, error) {
	rows, err := q.db.QueryContext(ctx, listPublicBlogPostsByAccount, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogPost
	for rows.Next() {
		var i BlogPost
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.Status,
			&i.AccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBlogPost = `-- name: UpdateBlogPost :exec
UPDATE blog_posts
set title = ?, content = ?, status = ?
WHERE id = ?
`

type UpdateBlogPostParams struct {
	Title   string
	Content string
	Status  string
	ID      int64
}

func (q *Queries) UpdateBlogPost(ctx context.Context, arg UpdateBlogPostParams) error {
	_, err := q.db.ExecContext(ctx, updateBlogPost,
		arg.Title,
		arg.Content,
		arg.Status,
		arg.ID,
	)
	return err
}
