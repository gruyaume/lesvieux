// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: employer_accounts.sql

package db

import (
	"context"
)

const createEmployerAccount = `-- name: CreateEmployerAccount :one
INSERT INTO employer_accounts (
  email, password_hash, employer_id
) VALUES (
  ?, ?, ?
)
RETURNING id, email, password_hash, employer_id
`

type CreateEmployerAccountParams struct {
	Email        string
	PasswordHash string
	EmployerID   int64
}

func (q *Queries) CreateEmployerAccount(ctx context.Context, arg CreateEmployerAccountParams) (EmployerAccount, error) {
	row := q.db.QueryRowContext(ctx, createEmployerAccount, arg.Email, arg.PasswordHash, arg.EmployerID)
	var i EmployerAccount
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.EmployerID,
	)
	return i, err
}

const deleteEmployerAccount = `-- name: DeleteEmployerAccount :exec
DELETE FROM employer_accounts
WHERE id = ?
`

func (q *Queries) DeleteEmployerAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmployerAccount, id)
	return err
}

const getEmployerAccount = `-- name: GetEmployerAccount :one
SELECT id, email, password_hash, employer_id FROM employer_accounts
WHERE id = ? LIMIT 1
`

func (q *Queries) GetEmployerAccount(ctx context.Context, id int64) (EmployerAccount, error) {
	row := q.db.QueryRowContext(ctx, getEmployerAccount, id)
	var i EmployerAccount
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.EmployerID,
	)
	return i, err
}

const getEmployerAccountByEmail = `-- name: GetEmployerAccountByEmail :one
SELECT id, email, password_hash, employer_id FROM employer_accounts
WHERE email = ? LIMIT 1
`

func (q *Queries) GetEmployerAccountByEmail(ctx context.Context, email string) (EmployerAccount, error) {
	row := q.db.QueryRowContext(ctx, getEmployerAccountByEmail, email)
	var i EmployerAccount
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.EmployerID,
	)
	return i, err
}

const listEmployerAccounts = `-- name: ListEmployerAccounts :many
SELECT id, email, password_hash, employer_id FROM employer_accounts
ORDER BY email
`

func (q *Queries) ListEmployerAccounts(ctx context.Context) ([]EmployerAccount, error) {
	rows, err := q.db.QueryContext(ctx, listEmployerAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EmployerAccount
	for rows.Next() {
		var i EmployerAccount
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PasswordHash,
			&i.EmployerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const numEmployerAccounts = `-- name: NumEmployerAccounts :one
SELECT COUNT(*) FROM employer_accounts
`

func (q *Queries) NumEmployerAccounts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, numEmployerAccounts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateEmployerAccount = `-- name: UpdateEmployerAccount :exec
UPDATE employer_accounts
set password_hash = ?
WHERE id = ?
`

type UpdateEmployerAccountParams struct {
	PasswordHash string
	ID           int64
}

func (q *Queries) UpdateEmployerAccount(ctx context.Context, arg UpdateEmployerAccountParams) error {
	_, err := q.db.ExecContext(ctx, updateEmployerAccount, arg.PasswordHash, arg.ID)
	return err
}
